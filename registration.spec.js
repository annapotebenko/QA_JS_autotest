const { test, expect } = require('@playwright/test');

test.describe('–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó', () => {

  test.beforeEach(async ({ page }) => {
    await page.goto('https://diia.gov.ua/'); // —Å–∞–π—Ç, —è–∫–∏–π —Ç–µ—Å—Ç—É—î–º–æ
  });

  test('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ', async ({ page }) => {
    await page.fill('#email', 'testuser@example.com');
    await page.fill('#password', 'StrongPass123!');
    await page.fill('#confirmPassword', 'StrongPass123!');
    await page.click('button[type="submit"]');

    await expect(page).toHaveURL(/.*dashboard/);
    await expect(page.locator('.welcome-message')).toContainText('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!');
  });

  test('–ü–æ–º–∏–ª–∫–∞: –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å', async ({ page }) => {
    await page.fill('#email', 'shortpass@example.com');
    await page.fill('#password', '123');
    await page.fill('#confirmPassword', '123');
    await page.click('button[type="submit"]');

    const error = page.locator('.error-password');
    await expect(error).toBeVisible();
    await expect(error).toHaveText(/–ù–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å!/);
  });

  test('üö´ –ü–æ–ª–µ email –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø—É—Å—Ç–∏–º', async ({ page }) => {
    await page.fill('#email', '');
    await page.fill('#password', 'StrongPass123!');
    await page.fill('#confirmPassword', 'StrongPass123!');
    await page.click('button[type="submit"]');

    const emailError = page.locator('.error-email');
    await expect(emailError).toBeVisible();
    await expect(emailError).toHaveText(/Email —Ç—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ/);
  });

  test('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ø–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å', async ({ page }) => {
    await page.fill('#email', 'mismatch@example.com');
    await page.fill('#password', 'StrongPass123!');
    await page.fill('#confirmPassword', 'OtherPass456!');
    await page.click('button[type="submit"]');

    const confirmError = page.locator('.error-confirm');
    await expect(confirmError).toBeVisible();
    await expect(confirmError).toHaveText(/–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å/);
  });

});

